[{"/Users/tharunganapathiraman/Documents/GWU/Courses/Component based enterpise software/Project/UI/wecureit-ui-tharun/src/index.tsx":"1","/Users/tharunganapathiraman/Documents/GWU/Courses/Component based enterpise software/Project/UI/wecureit-ui-tharun/src/reportWebVitals.ts":"2","/Users/tharunganapathiraman/Documents/GWU/Courses/Component based enterpise software/Project/UI/wecureit-ui-tharun/src/App.tsx":"3","/Users/tharunganapathiraman/Documents/GWU/Courses/Component based enterpise software/Project/UI/wecureit-ui-tharun/src/SignIn.tsx":"4","/Users/tharunganapathiraman/Documents/GWU/Courses/Component based enterpise software/Project/UI/wecureit-ui-tharun/src/SignUpPatient.tsx":"5","/Users/tharunganapathiraman/Documents/GWU/Courses/Component based enterpise software/Project/UI/wecureit-ui-tharun/src/PatientDashboard.tsx":"6","/Users/tharunganapathiraman/Documents/GWU/Courses/Component based enterpise software/Project/UI/wecureit-ui-tharun/src/AppointmentTable.tsx":"7","/Users/tharunganapathiraman/Documents/GWU/Courses/Component based enterpise software/Project/UI/wecureit-ui-tharun/src/AppointmentViewer.tsx":"8","/Users/tharunganapathiraman/Documents/GWU/Courses/Component based enterpise software/Project/UI/wecureit-ui-tharun/src/CreateAppointment.tsx":"9","/Users/tharunganapathiraman/Documents/GWU/Courses/Component based enterpise software/Project/UI/wecureit-ui-tharun/src/FacilityBookingForm.tsx":"10","/Users/tharunganapathiraman/Documents/GWU/Courses/Component based enterpise software/Project/UI/wecureit-ui-tharun/src/utils.tsx":"11","/Users/tharunganapathiraman/Documents/GWU/Courses/Component based enterpise software/Project/UI/wecureit-ui-tharun/src/DoctorBookingForm.tsx":"12","/Users/tharunganapathiraman/Documents/GWU/Courses/Component based enterpise software/Project/UI/wecureit-ui-tharun/src/SpecializationBookingForm.tsx":"13","/Users/tharunganapathiraman/Documents/GWU/Courses/Component based enterpise software/Project/UI/wecureit-ui-tharun/src/PatientAccount.tsx":"14"},{"size":554,"mtime":1683697660802,"results":"15","hashOfConfig":"16"},{"size":425,"mtime":1683697660803,"results":"17","hashOfConfig":"16"},{"size":961,"mtime":1683754232291,"results":"18","hashOfConfig":"16"},{"size":2863,"mtime":1683701934185,"results":"19","hashOfConfig":"16"},{"size":2338,"mtime":1683701189328,"results":"20","hashOfConfig":"16"},{"size":1606,"mtime":1683756202503,"results":"21","hashOfConfig":"16"},{"size":2561,"mtime":1683756234706,"results":"22","hashOfConfig":"16"},{"size":1751,"mtime":1683739567740,"results":"23","hashOfConfig":"16"},{"size":2612,"mtime":1683752285799,"results":"24","hashOfConfig":"16"},{"size":6157,"mtime":1683750031024,"results":"25","hashOfConfig":"16"},{"size":559,"mtime":1683710746083,"results":"26","hashOfConfig":"16"},{"size":5626,"mtime":1683752161795,"results":"27","hashOfConfig":"16"},{"size":6449,"mtime":1683751410398,"results":"28","hashOfConfig":"16"},{"size":4947,"mtime":1683756033939,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},"1ml9crt",{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79"},"/Users/tharunganapathiraman/Documents/GWU/Courses/Component based enterpise software/Project/UI/wecureit-ui-tharun/src/index.tsx",[],[],[],"/Users/tharunganapathiraman/Documents/GWU/Courses/Component based enterpise software/Project/UI/wecureit-ui-tharun/src/reportWebVitals.ts",[],[],[],"/Users/tharunganapathiraman/Documents/GWU/Courses/Component based enterpise software/Project/UI/wecureit-ui-tharun/src/App.tsx",["80"],[],"import React from 'react';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport logo from './logo.svg';\nimport './App.css';\nimport SignIn from './SignIn';\nimport SignUpPatient from './SignUpPatient';\nimport PatientDashboard from './PatientDashboard';\nimport AppointmentViewer from './AppointmentViewer';\nimport CreateAppointment from './CreateAppointment';\nimport PatientAccount from './PatientAccount';\n\nfunction App() {\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/\" Component={SignIn} />\n        <Route path=\"/signup-patient\" Component={SignUpPatient} />\n        <Route path=\"/patient-dashboard\" Component={PatientDashboard} />\n        <Route path=\"/appointments/:id\" Component={AppointmentViewer} />\n        <Route path=\"/create-appointment/:patientId\" Component={CreateAppointment} />\n        <Route path=\"/patient-account\" Component={PatientAccount} />\n      </Routes>\n    </Router>\n  );\n}\n\nexport default App;","/Users/tharunganapathiraman/Documents/GWU/Courses/Component based enterpise software/Project/UI/wecureit-ui-tharun/src/SignIn.tsx",[],[],"/Users/tharunganapathiraman/Documents/GWU/Courses/Component based enterpise software/Project/UI/wecureit-ui-tharun/src/SignUpPatient.tsx",[],[],"/Users/tharunganapathiraman/Documents/GWU/Courses/Component based enterpise software/Project/UI/wecureit-ui-tharun/src/PatientDashboard.tsx",["81","82"],[],"import { useLocation, useNavigate } from 'react-router-dom';\nimport { AppointmentDetail, Patient } from './interfaces';\nimport { PatientAppointmentTable } from './AppointmentTable';\nimport { useEffect, useState } from 'react';\n\nfunction PatientDashboard(props: any) {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const locationPatient: Patient = location.state;\n  const [patient, setPatient] = useState<Patient>(locationPatient);\n\n  useEffect(() => {\n    fetch(`http://localhost:8080/api/patient/${locationPatient.id}`)\n      .then((response) => response.json())\n      .then((data) => {\n        setPatient(data);\n      })\n      .catch((error) => {\n        console.error(error);\n        // display error message to user\n      });\n  }, []);\n  \n  const handleMenuOptionClick = (option: string) => {\n    switch (option) {\n      case \"account\":\n        // handle account option click\n        navigate('/patient-account', { state: patient });\n        break;\n      case \"signout\":\n        // handle sign out option click\n        navigate('/');\n        break;\n      default:\n        break;\n    }\n  }\n\n  return (\n    <div>\n      <div>\n          <select onChange={(e) => handleMenuOptionClick(e.target.value)}>\n          <option value=\"No Select\">--Create Appointment--</option>\n            <option value=\"account\">My Account</option>\n            <option value=\"signout\">Sign Out</option>\n          </select>\n        </div>\n      <h2>Welcome {patient.firstName} {patient.lastName}!</h2>\n      <PatientAppointmentTable patient={patient} />\n    </div>\n  );\n}\n\nexport default PatientDashboard;\n","/Users/tharunganapathiraman/Documents/GWU/Courses/Component based enterpise software/Project/UI/wecureit-ui-tharun/src/AppointmentTable.tsx",[],[],"/Users/tharunganapathiraman/Documents/GWU/Courses/Component based enterpise software/Project/UI/wecureit-ui-tharun/src/AppointmentViewer.tsx",["83"],[],"import { useEffect, useState } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { Appointment, AppointmentDetail } from \"./interfaces\";\n\nconst AppointmentViewer = () => {\n  const { id } = useParams();\n  const navigate = useNavigate();\n  const [appointment, setAppointment] = useState<Appointment | null>(null);\n\n  useEffect(() => {\n    const fetchAppointment = async () => {\n      try {\n        const response = await fetch(`http://localhost:8080/api/appointment/${id}`);\n        const data = await response.json();\n        setAppointment(data);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    fetchAppointment();\n  }, [id]);\n\n  const handleGoBack = () => {\n    navigate(-1);\n  };\n\n  if (!appointment) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div>\n      <h2>Appointment Details</h2>\n      <p>Appointment Date: {appointment.appointmentDate}</p>\n      <p>Appointment Time: {appointment.appointmentTime}</p>\n      <p>Appointment Duration: {appointment.appointmentDuration}</p>\n      <p>Patient name: {appointment.patient.firstName} {appointment.patient.lastName}</p>\n      <p>Patient ph.no: {appointment.patient.phoneNumber}</p>\n      <p>Doctor name: {appointment.doctor.firstName} {appointment.doctor.lastName}</p>\n      <p>Doctor ph.no: {appointment.doctor.phoneNumber}</p>\n      <p>Facility name: {appointment.facility.name}</p>\n      <p>Facility ph.no: {appointment.facility.phoneNumber}</p>\n      <p>Facility address: {appointment.facility.address}</p>\n      <p>Facility city: {appointment.facility.city}</p>\n      <p>Facility zipcode: {appointment.facility.zipCode}</p>\n      <button onClick={handleGoBack}>Go Back</button>\n    </div>\n  );\n};\n\nexport default AppointmentViewer;\n","/Users/tharunganapathiraman/Documents/GWU/Courses/Component based enterpise software/Project/UI/wecureit-ui-tharun/src/CreateAppointment.tsx",["84"],[],"import { useEffect, useState } from \"react\";\nimport FacilityBookingForm from \"./FacilityBookingForm\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { Patient } from \"./interfaces\";\nimport { DoctorBookingForm } from \"./DoctorBookingForm\";\nimport { SpecializationBookingForm } from \"./SpecializationBookingForm\";\n\nconst CreateAppointment = () => {\n\tconst { patientId } = useParams();\n  const navigate = useNavigate();\n  const [bookingOption, setBookingOption] = useState(\"\");\n\tconst [patient, setPatient] = useState<Patient | null>(null)\n\n  useEffect(() => {\n    const fetchAppointment = async () => {\n      try {\n        const response = await fetch(`http://localhost:8080/api/patient/${patientId}`);\n        const data = await response.json();\n        setPatient(data);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    fetchAppointment();\n  }, [patientId]);\n\n  const handleBookingOptionChange = (event: any) => {\n    setBookingOption(event.target.value);\n  };\n\n  const handleFormSubmit = (event: any) => {\n    event.preventDefault();\n    // TODO: add logic to submit form based on booking option\n  };\n\n  const handleGoBack = () => {\n    navigate(-1);\n  };\n\n  return (\n    <div>\n      <button onClick={handleGoBack}>Go Back</button>\n      <h2>Create New Appointment</h2>\n      <div>\n        <input\n          type=\"radio\"\n          id=\"facilityBooking\"\n          name=\"bookingOption\"\n          value=\"facility\"\n          checked={bookingOption === \"facility\"}\n          onChange={handleBookingOptionChange}\n        />\n        <label htmlFor=\"facilityBooking\">Book by Facility</label>\n      </div>\n      <div>\n        <input\n          type=\"radio\"\n          id=\"specializationBooking\"\n          name=\"bookingOption\"\n          value=\"specialization\"\n          checked={bookingOption === \"specialization\"}\n          onChange={handleBookingOptionChange}\n        />\n        <label htmlFor=\"specializationBooking\">Book by Specialization</label>\n      </div>\n      <div>\n        <input\n          type=\"radio\"\n          id=\"doctorBooking\"\n          name=\"bookingOption\"\n          value=\"doctor\"\n          checked={bookingOption === \"doctor\"}\n          onChange={handleBookingOptionChange}\n        />\n        <label htmlFor=\"doctorBooking\">Book by Doctor</label>\n      </div>\n      {bookingOption === \"facility\" && <FacilityBookingForm patient={patient}/>}\n      {bookingOption === \"specialization\" && <SpecializationBookingForm patient={patient}/>}\n      {bookingOption === \"doctor\" && <DoctorBookingForm patient={patient}/>}\n    </div>\n  );\n};\n\nexport default CreateAppointment;\n","/Users/tharunganapathiraman/Documents/GWU/Courses/Component based enterpise software/Project/UI/wecureit-ui-tharun/src/FacilityBookingForm.tsx",["85"],[],"import { useState, useEffect } from \"react\";\nimport { AppointmentRequest, Doctor, Facility, Patient, Specialization } from \"./interfaces\";\nimport { formatDate, formatTime } from \"./utils\";\nimport { useNavigate } from \"react-router-dom\";\n\ninterface Props {\n\tpatient: Patient | null\n}\n\nconst FacilityBookingForm = (props: Props) => {\n\tconst navigate = useNavigate();\n  const [facilities, setFacilities] = useState<Facility[] | []>([]);\n  const [selectedFacility, setSelectedFacility] = useState<Facility | null>(null);\n  const [selectedSpecialization, setSelectedSpecialization] = useState<Specialization | null>(null);\n\tconst [selectedDate, setSelectedDate] = useState<string>(\"\");\n  const [selectedTime, setSelectedTime] = useState<string>(\"\");\n\tconst [doctors, setDoctors] = useState<Doctor[] | []>([]);\n  const [selectedDoctor, setSelectedDoctor] = useState<Doctor | null>(null);\n\tconst [duration, setDuration] = useState<number>();\n\n  useEffect(() => {\n\t\tconsole.log(\"props\",props)\n    const fetchFacilities = async () => {\n      try {\n        const response = await fetch(\"http://localhost:8080/api/facility\");\n        const data = await response.json();\n        setFacilities(data);\n\t\t\t\tsetSelectedFacility(facilities[0])\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    fetchFacilities();\n  }, []);\n\n  const handleFacilityChange = (event: any) => {\n    const facilityId = event.target.value;\n    const facility = facilities.find(f => f.id === parseInt(facilityId));\n    setSelectedFacility(facility || null);\n\t\tsetSelectedSpecialization(selectedFacility?.specializations[0] || null)\n  };\n\n  const handleSpecializationChange = (event: any) => {\n    const specializationId = event.target.value;\n    const specialization = selectedFacility?.specializations.find(s => s.id === parseInt(specializationId));\n    setSelectedSpecialization(specialization || null);\n  };\n\n\tconst handleDurationChange = (event: any) => {\n\t\tconst newDuration = parseInt(event.target.value);\n\t\tsetDuration(newDuration);\n\t};\t\n\n\tconst handleDateChange = (event: any) => {\n    const date = event.target.value;\n\t\tconsole.log(date)\n\t\tconst formattedDate = formatDate(date);\n\t\tsetSelectedDate(formattedDate);\n    setSelectedDate(date);\n  };\n\n  const handleTimeChange = (event: any) => {\n    const time = event.target.value;\n\t\tconsole.log(time)\n\t\tconst formattedTime = formatTime(time);\n\t\tsetSelectedTime(formattedTime);\n\n\t\tconst fetchDoctors = async () => {\n      try {\n        const response = await fetch(`http://localhost:8080/api/appointment/facility-spec-date-time/${selectedFacility?.id}/${selectedSpecialization?.id}/${selectedDate}/${selectedTime}`);\n        const data = await response.json();\n        setDoctors(data);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    fetchDoctors();\n\t\tsetSelectedDoctor(doctors[0]);\n  };\n\n\tconst handleDoctorChange = (event: any) => {\n    const doctorId = event.target.value;\n    const doctor = doctors.find(f => f.id === parseInt(doctorId));\n    setSelectedDoctor(doctor || null);\n  };\n\n\tconst handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n\t\tevent.preventDefault();\n\n\t\tif (selectedFacility?.workSchedules) {\n\t\t\tselectedFacility.workSchedules = null;\n\t\t}\n\n\t\tconst appointmentRequest: AppointmentRequest = {\n\t\t\tappointmentDate: selectedDate,\n\t\t\tappointmentTime: selectedTime,\n\t\t\tappointmentDuration: duration || 15,\n\t\t\tpatient: props.patient,\n\t\t\tdoctor: selectedDoctor,\n\t\t\tfacility: selectedFacility,\n\t\t\troom : {\n        \"id\": 1,\n        \"appointment\": [\n            {\n                \"id\": 1,\n                \"appointmentDate\": \"2023-04-22\",\n                \"appointmentTime\": \"12:00:00\",\n                \"appointmentDuration\": 30\n            }\n        ]\n    \t}\n\t\t};\n\t\n\t\ttry {\n\t\t\tconst response = await fetch(\"http://localhost:8080/api/appointment/patient\", {\n\t\t\t\tmethod: \"POST\",\n\t\t\t\theaders: {\n\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t},\n\t\t\t\tbody: JSON.stringify(appointmentRequest),\n\t\t\t});\n\t\t\tconsole.log(response);\n\t\t\tif (!response.ok) {\n\t\t\t\tthrow new Error(\"Failed to book appointment.\");\n\t\t\t}\n\t\t\t\n\t\t\talert(\"Appointment booked successfully!\");\n\t\t\tnavigate(`/create-appointment/${props.patient?.id}`);\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t\talert(\"Failed to book appointment.\");\n\t\t}\n\t};\n\t\n\n  return (\n    <div>\n      <h3>Book by Facility</h3>\n      <form onSubmit={handleSubmit}>\n        {facilities && <label>\n          Select a facility:\n          <select onClick={handleFacilityChange}>\n            {facilities.map((facility) => (\n              <option key={facility.id} value={facility.id}>\n                {facility.name}\n              </option>\n            ))}\n          </select>\n        </label>}\n        <br />\n        {selectedFacility && <label>\n          Select a specialization:\n          <select onClick={handleSpecializationChange}>\n            {selectedFacility?.specializations.map((specialization) => (\n              <option key={specialization.id} value={specialization.id}>\n                {specialization.name}\n              </option>\n            ))}\n          </select>\n        </label>}\n\t\t\t\t<br />\n\t\t\t\t{selectedSpecialization && <label>\n\t\t\t\t\tSelect a duration:\n\t\t\t\t\t<select value={duration} onClick={handleDurationChange}>\n\t\t\t\t\t\t<option value={15}>15 minutes</option>\n\t\t\t\t\t\t<option value={30}>30 minutes</option>\n\t\t\t\t\t\t<option value={60}>60 minutes</option>\n\t\t\t\t\t</select>\n\t\t\t\t</label>}\n\t\t\t\t<br />\n\t\t\t\t{duration && <label>\n          Select a date:\n          <input type=\"date\" onChange={handleDateChange} />\n        </label>}\n        <br />\n        {selectedDate && <label>\n          Select a time:\n          <input type=\"time\" onChange={handleTimeChange} />\n        </label>}\n        <br />\n\t\t\t\t{selectedTime && <label>\n          Select a Doctor:\n          <select onClick={handleDoctorChange}>\n            {doctors.map((doctor) => (\n              <option key={doctor.id} value={doctor.id}>\n                {doctor.firstName} {doctor.lastName}\n              </option>\n            ))}\n          </select>\n        </label>}\n        <button type=\"submit\">Book</button>\n      </form>\n    </div>\n  );\n};\n\nexport default FacilityBookingForm;\n","/Users/tharunganapathiraman/Documents/GWU/Courses/Component based enterpise software/Project/UI/wecureit-ui-tharun/src/utils.tsx",[],[],"/Users/tharunganapathiraman/Documents/GWU/Courses/Component based enterpise software/Project/UI/wecureit-ui-tharun/src/DoctorBookingForm.tsx",[],[],"/Users/tharunganapathiraman/Documents/GWU/Courses/Component based enterpise software/Project/UI/wecureit-ui-tharun/src/SpecializationBookingForm.tsx",[],[],"/Users/tharunganapathiraman/Documents/GWU/Courses/Component based enterpise software/Project/UI/wecureit-ui-tharun/src/PatientAccount.tsx",["86"],[],"import { useEffect, useState } from \"react\";\nimport { AppointmentDetail, Patient } from \"./interfaces\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\n\nconst PatientAccount = () => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const locationPatient: Patient = location.state;\n  const [editablePatient, setEditablePatient] = useState<Patient>(locationPatient);\n  const [pastAppointments, setPastAppointments] = useState<AppointmentDetail[]>([]);\n\n  useEffect(() => {\n    fetch(`http://localhost:8080/api/patient/${locationPatient.id}`)\n      .then((response) => response.json())\n      .then((data) => {\n        setEditablePatient(data);\n      })\n      .catch((error) => {\n        console.error(error);\n        // display error message to user\n      });\n  }, []);\n\n  useEffect(() => {\n    const now = Date.now();\n    const filteredAppointments = editablePatient.patientAppointments.filter(appointment => {\n      const appointmentDate = Date.parse(appointment.appointmentDate);\n      return appointmentDate < now || (appointmentDate === now);\n    });\n    setPastAppointments(filteredAppointments);\n  }, [editablePatient]);\n  \n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.target;\n    setEditablePatient((prevState) => ({\n      ...prevState,\n      [name]: value,\n    }));\n  };\n\n  const handleSave = (event: any) => {\n    event.preventDefault();\n    fetch(\"http://localhost:8080/api/patient\", {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(editablePatient),\n    })\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(\"Failed to update patient information\");\n        }\n        return response.json();\n      })\n      .then((data) => {\n        console.log(\"Patient information updated successfully:\", data);\n        // navigate to dashboard or display success message\n      })\n      .catch((error) => {\n        console.error(error);\n        // display error message to user\n      });\n  };\n  \n\n  const handleGoBack = () => {\n    navigate(-1);\n  };\n\n\n  const handleViewAppointment = (appointment: AppointmentDetail) => {\n    console.log(`View appointment with id ${appointment.id}`);\n    navigate(`/appointments/${appointment.id}`);\n    // TODO: add logic to show appointment details\n  };\n\n  return (\n    <div>\n      <button onClick={handleGoBack}>Go Back</button>\n      <h2>My Account</h2>\n      <form>\n        <div>\n          <label htmlFor=\"firstName\">First Name:</label>\n          <input\n            type=\"text\"\n            name=\"firstName\"\n            value={editablePatient.firstName}\n            onChange={handleInputChange}\n          />\n        </div>\n        <div>\n          <label htmlFor=\"lastName\">Last Name:</label>\n          <input\n            type=\"text\"\n            name=\"lastName\"\n            value={editablePatient.lastName}\n            onChange={handleInputChange}\n          />\n        </div>\n        <div>\n          <label htmlFor=\"phoneNumber\">Phone Number:</label>\n          <input\n            type=\"text\"\n            name=\"phoneNumber\"\n            value={editablePatient.phoneNumber}\n            onChange={handleInputChange}\n          />\n        </div>\n        <div>\n          <label htmlFor=\"address\">Address:</label>\n          <input\n            type=\"text\"\n            name=\"address\"\n            value={editablePatient.address}\n            onChange={handleInputChange}\n          />\n        </div>\n        <div>\n          <label htmlFor=\"city\">City:</label>\n          <input\n            type=\"text\"\n            name=\"city\"\n            value={editablePatient.city}\n            onChange={handleInputChange}\n          />\n        </div>\n        <div>\n          <label htmlFor=\"zipCode\">Zip Code:</label>\n          <input\n            type=\"text\"\n            name=\"zipCode\"\n            value={editablePatient.zipCode}\n            onChange={handleInputChange}\n          />\n        </div>\n        <button type=\"button\" onClick={handleSave}>\n          Save Changes\n        </button>\n      </form>\n      <br />\n      <br />\n      <div>\n        <h3>Appointments History</h3>\n        <table>\n        <thead>\n            <tr>\n            <th>Date</th>\n            <th>Time</th>\n            <th>Duration</th>\n            </tr>\n        </thead>\n        <tbody>\n            {pastAppointments.map((appointment: AppointmentDetail) => (\n            <tr key={appointment.id}>\n                <td>{appointment.appointmentDate}</td>\n                <td>{appointment.appointmentTime}</td>\n                <td>{appointment.appointmentDuration}</td>\n                <td>\n                <button onClick={() => handleViewAppointment(appointment)}>\n                  View\n                </button>\n              </td>\n            </tr>\n            ))}\n        </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default PatientAccount;\n",{"ruleId":"87","severity":1,"message":"88","line":3,"column":8,"nodeType":"89","messageId":"90","endLine":3,"endColumn":12},{"ruleId":"87","severity":1,"message":"91","line":2,"column":10,"nodeType":"89","messageId":"90","endLine":2,"endColumn":27},{"ruleId":"92","severity":1,"message":"93","line":22,"column":6,"nodeType":"94","endLine":22,"endColumn":8,"suggestions":"95"},{"ruleId":"87","severity":1,"message":"91","line":3,"column":23,"nodeType":"89","messageId":"90","endLine":3,"endColumn":40},{"ruleId":"87","severity":1,"message":"96","line":31,"column":9,"nodeType":"89","messageId":"90","endLine":31,"endColumn":25},{"ruleId":"92","severity":1,"message":"97","line":34,"column":6,"nodeType":"94","endLine":34,"endColumn":8,"suggestions":"98"},{"ruleId":"92","severity":1,"message":"93","line":22,"column":6,"nodeType":"94","endLine":22,"endColumn":8,"suggestions":"99"},"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'AppointmentDetail' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'locationPatient.id'. Either include it or remove the dependency array.","ArrayExpression",["100"],"'handleFormSubmit' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'facilities' and 'props'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setSelectedFacility' needs the current value of 'facilities'.",["101"],["102"],{"desc":"103","fix":"104"},{"desc":"105","fix":"106"},{"desc":"103","fix":"107"},"Update the dependencies array to be: [locationPatient.id]",{"range":"108","text":"109"},"Update the dependencies array to be: [facilities, props]",{"range":"110","text":"111"},{"range":"112","text":"109"},[759,761],"[locationPatient.id]",[1322,1324],"[facilities, props]",[797,799]]